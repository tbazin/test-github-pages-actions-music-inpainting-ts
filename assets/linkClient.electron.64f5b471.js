import{e as o,l as t,d as l}from"./index.3ae49fb6.js";import"@tensorflow/tfjs";class r extends o.exports.EventEmitter{windowId=window.electronWindowId;abletonLinkAPI=window.abletonLinkApi;bpmControl;constructor(e){super(),this.bpmControl=e,this.registerOnBpmChangeCallback(),this.registerOnQuantumChangeCallback(),this.registerOnNumPeersChangeCallback(),this.registerOnInterfaceBpmChangeCallback(),this.abletonLinkAPI.onIsEnabled(this.windowId,()=>{this.isEnabled&&this.abletonLinkAPI.notifyEnabled(this.windowId)}),this.abletonLinkAPI.onDownbeat(this.windowId,()=>{this.isEnabled&&this.emit("downbeat")}),this.emit("client-initialized")}registerOnNumPeersChangeCallback(){this.abletonLinkAPI.onNumPeers(this.windowId,e=>{this.isEnabled&&this.triggerNotification("NONOTO | Ableton Link","Number of peers changed, now "+e.toString()+" peer"+(e==1?"":"s"),4e3)})}registerOnInterfaceBpmChangeCallback(){this.bpmControl.on("interface-tempo-changed",e=>{this.setLinkServerBPM(e)})}triggerNotification(e,i,n=0){const a=new Notification(e,{body:i});n>0&&setTimeout(()=>a.close(),n)}emitSynchronizationMessage(){this.emit("enabled"),this.setBPMtoLinkBPM_async()}requestPhaseAsync(){this.abletonLinkAPI.requestPhaseAsync(this.windowId)}async enableServer(){await this.abletonLinkAPI.enable(this.windowId)}registerOnBpmChangeCallback(){this.abletonLinkAPI.onTempo(this.windowId,e=>{this.bpmControl.emit("link-tempo-changed",e),t.debug(`Received BPM update from Ableton Link Server with value ${e}`)})}registerOnQuantumChangeCallback(){this.abletonLinkAPI.onQuantum(this.windowId,e=>{this.emit("quantum",e),t.debug(`Received quantum update from Ableton Link Server with value ${e}`)})}_enabled=!1;get isEnabled(){return this._enabled}async enable(){await this.enableServer(),this._enabled=!0,this.emitSynchronizationMessage()}async disable(){await this.disableServer(),this._enabled=!1}async disableServer(){await this.abletonLinkAPI.disable(this.windowId)}setBPMtoLinkBPM_async(){this.isEnabled&&this.abletonLinkAPI.requestTempoAsync(this.windowId)}setLinkServerBPM(e){this.isEnabled&&this.abletonLinkAPI.setTempo(this.windowId,e)}requestQuantum(){this.abletonLinkAPI.requestQuantumAsync(this.windowId)}setQuantum(e){return this.abletonLinkAPI.setQuantum(this.windowId,e)}getState(){this.abletonLinkAPI.ping(this.windowId)}async pingServer(){const e=new Promise(i=>{this.abletonLinkAPI.onPong(this.windowId,i)});return await this.abletonLinkAPI.ping(this.windowId),e}}l.link_channel_prefix;class b extends r{abletonLinkAPI=window.abletonLinkApi}export{b as AbletonLinkClientElectron};
//# sourceMappingURL=linkClient.electron.64f5b471.js.map
