{"version":3,"file":"linkClient.electron.64f5b471.js","sources":["../../src/ableton_link/linkClient.abstract.ts","../../src/ableton_link/linkClient.electron.ts"],"sourcesContent":["import { EventEmitter } from 'events'\nimport { TypedEmitter } from 'tiny-typed-emitter'\nimport log from 'loglevel'\nimport { BPMControl } from '../numberControl'\nimport {\n  AbletonLinkServerEvent,\n  IAbletonLinkApi,\n} from '../../../preload/src/abletonLinkApi'\n\nexport interface LinkClientConstructor {\n  new (bpmControl: BPMControl, quantum?: number): AbletonLinkClient\n}\n\nexport type AbletonLinkClientRequest = {\n  'get-phase': (never: never) => void\n  'get-quantum': (never: never) => void\n  'get-tempo': (never: never) => void\n  'get-numPeers': (never: never) => void\n\n  'set-tempo': (tempo: number) => void\n  'set-quantum': (quantum: number) => void\n}\n\ntype AbletonLinkEvent = AbletonLinkServerEvent & AbletonLinkClientRequest\n\nexport abstract class AbletonLinkServerEmitter extends TypedEmitter<AbletonLinkEvent> {}\n\nexport abstract class AbletonLinkClient extends EventEmitter {\n  protected readonly windowId = window.electronWindowId\n  readonly abletonLinkAPI: Readonly<IAbletonLinkApi> = window.abletonLinkApi\n\n  // // TODO(@tbazin, 2021/09/13): fix event type, use a type variable?\n  // protected onServerMessage<T extends keyof AbletonLinkServerEvent>(\n  //   message: T,\n  //   callback: AbletonLinkEvent[T]\n  // ): this {\n  //   this.abletonLinkAPI.on(message, callback)\n  //   return this\n  // }\n  // protected onServerMessageOnce<T extends keyof AbletonLinkServerEvent>(\n  //   message: T,\n  //   callback: AbletonLinkEvent[T]\n  // ): this {\n  //   this.abletonLinkAPI.once(message, callback)\n  //   return this\n  // }\n\n  // protected abletonLinkAPI.<T extends keyof AbletonLinkClientRequest>(\n  //   message: T,\n  //   data: Parameters<AbletonLinkEvent[T]>\n  // ): this {\n  //   this.abletonLinkAPI.emit(message, ...data)\n  //   return this\n  // }\n\n  // protected removeServerListener<T extends keyof AbletonLinkServerEvent>(\n  //   message: T,\n  //   callback: AbletonLinkEvent[T]\n  // ): void {\n  //   this.abletonLinkAPI.removeListener(message, callback)\n  // }\n  // protected abstract removeAllServerListeners(\n  //   message: AbletonLinkServerEvent\n  // ): void\n  // protected enabled = false\n  // protected _initialized = false\n  // get initialized(): boolean {\n  //   return this._initialized\n  // }\n\n  readonly bpmControl: BPMControl\n  constructor(bpmControl: BPMControl) {\n    super()\n    // document.body.addEventListener('beforeunload', () => this.disableServer())\n\n    this.bpmControl = bpmControl\n    // disable server on client initialization: this is required to avoid\n    // leaving a leftover active server if the page is reloaded\n    // this.disableServer()\n\n    // register Ableton Link related callbacks\n    this.registerOnBpmChangeCallback()\n    this.registerOnQuantumChangeCallback()\n    this.registerOnNumPeersChangeCallback()\n\n    this.registerOnInterfaceBpmChangeCallback()\n\n    this.abletonLinkAPI.onIsEnabled(this.windowId, () => {\n      if (this.isEnabled) {\n        this.abletonLinkAPI.notifyEnabled(this.windowId)\n      }\n    })\n    this.abletonLinkAPI.onDownbeat(this.windowId, () => {\n      if (this.isEnabled) {\n        this.emit('downbeat')\n      }\n    })\n    // this.onServerMessage('check-enabled', () => {\n    //   if (this.isEnabled) {\n    //     this.abletonLinkAPI.('checks-enabled')\n    //   }\n    // })\n\n    // this._initialized = true\n    this.emit('client-initialized')\n  }\n\n  protected registerOnNumPeersChangeCallback(): void {\n    this.abletonLinkAPI.onNumPeers(this.windowId, (numPeers: number) => {\n      if (this.isEnabled) {\n        // this display is required as per the Ableton-link test-plan\n        // (https://github.com/Ableton/link/blob/master/TEST-PLAN.md)\n        this.triggerNotification(\n          'NONOTO | Ableton Link',\n          'Number of peers changed, now ' +\n            numPeers.toString() +\n            ' peer' +\n            (numPeers == 1 ? '' : 's'),\n          4000\n        )\n      }\n    })\n  }\n\n  protected registerOnInterfaceBpmChangeCallback(): void {\n    this.bpmControl.on('interface-tempo-changed', (newBpm: number) => {\n      this.setLinkServerBPM(newBpm)\n    })\n  }\n\n  protected triggerNotification(\n    title: string,\n    body: string,\n    timeout = 0\n  ): void {\n    const notification = new Notification(title, {\n      body: body,\n    })\n    if (timeout > 0) {\n      setTimeout(() => notification.close(), timeout)\n    }\n  }\n\n  emitSynchronizationMessage(): void {\n    this.emit('enabled')\n    this.setBPMtoLinkBPM_async()\n  }\n\n  requestPhaseAsync(): void {\n    this.abletonLinkAPI.requestPhaseAsync(this.windowId)\n  }\n\n  async enableServer(): Promise<void> {\n    await this.abletonLinkAPI.enable(this.windowId)\n    // return new Promise<void>((resolve) => {\n    //   this.onServerMessageOnce('link-enabled-success', () => {\n    //     resolve()\n    //   })\n    // })\n  }\n\n  protected registerOnBpmChangeCallback(): void {\n    this.abletonLinkAPI.onTempo(this.windowId, (newBPM: number) => {\n      this.bpmControl.emit('link-tempo-changed', newBPM)\n      log.debug(\n        `Received BPM update from Ableton Link Server with value ${newBPM}`\n      )\n    })\n  }\n\n  protected registerOnQuantumChangeCallback(): void {\n    this.abletonLinkAPI.onQuantum(this.windowId, (quantum: number) => {\n      this.emit('quantum', quantum)\n      log.debug(\n        `Received quantum update from Ableton Link Server with value ${quantum}`\n      )\n    })\n  }\n\n  protected _enabled: boolean = false\n  get isEnabled(): boolean {\n    return this._enabled\n  }\n\n  async enable(): Promise<void> {\n    await this.enableServer()\n    this._enabled = true\n    this.emitSynchronizationMessage()\n  }\n  async disable(): Promise<void> {\n    await this.disableServer()\n    this._enabled = false\n  }\n\n  async disableServer(): Promise<void> {\n    await this.abletonLinkAPI.disable(this.windowId)\n  }\n\n  // killServer(): void {\n  //   this.abletonLinkAPI.('kill')\n  // }\n\n  // retrieve current BPM from Link\n  setBPMtoLinkBPM_async(): void {\n    if (this.isEnabled) {\n      // server is expected to reply with a 'bpm' message\n      this.abletonLinkAPI.requestTempoAsync(this.windowId)\n    }\n  }\n\n  setLinkServerBPM(bpm: number): void {\n    if (this.isEnabled) {\n      this.abletonLinkAPI.setTempo(this.windowId, bpm)\n    }\n  }\n\n  // the `quantum` defines the desired number of quarter-notes between each\n  // 'downbeat', which are used to synchronize Play events.\n  // with a `quantum` of 4, NONOTO will wait and start playback on the\n  // beginning of a new measure (in a 4/4 time-signature setting)\n  protected requestQuantum(): void {\n    this.abletonLinkAPI.requestQuantumAsync(this.windowId)\n  }\n  protected setQuantum(newQuantum: number): Promise<number> {\n    return this.abletonLinkAPI.setQuantum(this.windowId, newQuantum)\n  }\n\n  protected getState(): void {\n    // get current state of the LINK-server on loading the client\n    this.abletonLinkAPI.ping(this.windowId)\n  }\n  async pingServer(): Promise<void> {\n    // // clean-up potential existing listeners\n    // this.removeAllServerListeners('pong')\n\n    const pingResponse = new Promise<void>((resolve) => {\n      this.abletonLinkAPI.onPong(this.windowId, resolve)\n    })\n    await this.abletonLinkAPI.ping(this.windowId)\n    return pingResponse\n  }\n}\n","import type { IpcRendererEvent } from 'electron'\nimport { AbletonLinkClient } from './linkClient.abstract'\n\nimport default_config from '../../../common/default_config.json'\nimport { BPMControl } from '../numberControl'\n\nconst VITE_COMPILE_ELECTRON = import.meta.env.VITE_COMPILE_ELECTRON != undefined\n\nconst link_channel_prefix: string = default_config['link_channel_prefix']\n\ntype IpcRendererCallback = (event: IpcRendererEvent, ...args: any[]) => any\n\nexport class AbletonLinkClientElectron extends AbletonLinkClient {\n  readonly abletonLinkAPI = window.abletonLinkApi\n}\n"],"names":["AbletonLinkClient","EventEmitter","bpmControl","numPeers","newBpm","title","body","timeout","notification","newBPM","log","quantum","bpm","newQuantum","pingResponse","resolve","default_config","AbletonLinkClientElectron"],"mappings":"+EA2BO,MAAeA,UAA0BC,EAAAA,QAAAA,YAAa,CACxC,SAAW,OAAO,iBAC5B,eAA4C,OAAO,eAyCnD,WACT,YAAYC,EAAwB,CAC5B,QAGN,KAAK,WAAaA,EAMlB,KAAK,4BAA4B,EACjC,KAAK,gCAAgC,EACrC,KAAK,iCAAiC,EAEtC,KAAK,qCAAqC,EAE1C,KAAK,eAAe,YAAY,KAAK,SAAU,IAAM,CAC/C,KAAK,WACF,KAAA,eAAe,cAAc,KAAK,QAAQ,CACjD,CACD,EACD,KAAK,eAAe,WAAW,KAAK,SAAU,IAAM,CAC9C,KAAK,WACP,KAAK,KAAK,UAAU,CACtB,CACD,EAQD,KAAK,KAAK,oBAAoB,CAChC,CAEU,kCAAyC,CACjD,KAAK,eAAe,WAAW,KAAK,SAAWC,GAAqB,CAC9D,KAAK,WAGF,KAAA,oBACH,wBACA,gCACEA,EAAS,WACT,SACCA,GAAY,EAAI,GAAK,KACxB,GAAA,CAEJ,CACD,CACH,CAEU,sCAA6C,CACrD,KAAK,WAAW,GAAG,0BAA4BC,GAAmB,CAChE,KAAK,iBAAiBA,CAAM,CAAA,CAC7B,CACH,CAEU,oBACRC,EACAC,EACAC,EAAU,EACJ,CACA,MAAAC,EAAe,IAAI,aAAaH,EAAO,CAC3C,KAAAC,CAAA,CACD,EACGC,EAAU,GACZ,WAAW,IAAMC,EAAa,MAAM,EAAGD,CAAO,CAElD,CAEA,4BAAmC,CACjC,KAAK,KAAK,SAAS,EACnB,KAAK,sBAAsB,CAC7B,CAEA,mBAA0B,CACnB,KAAA,eAAe,kBAAkB,KAAK,QAAQ,CACrD,CAEA,MAAM,cAA8B,CAClC,MAAM,KAAK,eAAe,OAAO,KAAK,QAAQ,CAMhD,CAEU,6BAAoC,CAC5C,KAAK,eAAe,QAAQ,KAAK,SAAWE,GAAmB,CACxD,KAAA,WAAW,KAAK,qBAAsBA,CAAM,EAC7CC,EAAA,MACF,2DAA2DD,GAAA,CAC7D,CACD,CACH,CAEU,iCAAwC,CAChD,KAAK,eAAe,UAAU,KAAK,SAAWE,GAAoB,CAC3D,KAAA,KAAK,UAAWA,CAAO,EACxBD,EAAA,MACF,+DAA+DC,GAAA,CACjE,CACD,CACH,CAEU,SAAoB,GAC9B,IAAI,WAAqB,CACvB,OAAO,KAAK,QACd,CAEA,MAAM,QAAwB,CAC5B,MAAM,KAAK,eACX,KAAK,SAAW,GAChB,KAAK,2BAA2B,CAClC,CACA,MAAM,SAAyB,CAC7B,MAAM,KAAK,gBACX,KAAK,SAAW,EAClB,CAEA,MAAM,eAA+B,CACnC,MAAM,KAAK,eAAe,QAAQ,KAAK,QAAQ,CACjD,CAOA,uBAA8B,CACxB,KAAK,WAEF,KAAA,eAAe,kBAAkB,KAAK,QAAQ,CAEvD,CAEA,iBAAiBC,EAAmB,CAC9B,KAAK,WACP,KAAK,eAAe,SAAS,KAAK,SAAUA,CAAG,CAEnD,CAMU,gBAAuB,CAC1B,KAAA,eAAe,oBAAoB,KAAK,QAAQ,CACvD,CACU,WAAWC,EAAqC,CACxD,OAAO,KAAK,eAAe,WAAW,KAAK,SAAUA,CAAU,CACjE,CAEU,UAAiB,CAEpB,KAAA,eAAe,KAAK,KAAK,QAAQ,CACxC,CACA,MAAM,YAA4B,CAIhC,MAAMC,EAAe,IAAI,QAAeC,GAAY,CAClD,KAAK,eAAe,OAAO,KAAK,SAAUA,CAAO,CAAA,CAClD,EACD,aAAM,KAAK,eAAe,KAAK,KAAK,QAAQ,EACrCD,CACT,CACF,CCzOoCE,EAAe,oBAI5C,MAAMC,UAAkCjB,CAAkB,CACtD,eAAiB,OAAO,cACnC"}